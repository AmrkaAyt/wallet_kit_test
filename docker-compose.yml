version: '3.8'

services:
  user_service:
    build: ./UserService
    ports:
      - "50051:50051"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
      POSTGRES_HOST: postgres
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
    networks:
      - app-network

  order_service:
    build: ./OrderService
    ports:
      - "50052:50052"
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      MONGO_URL: mongodb://mongo:27017
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
    networks:
      - app-network

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./UserService/db/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 10s
      retries: 5
    networks:
      - app-network

  mongo:
    image: mongo:4.4
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      retries: 5
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      retries: 5
    networks:
      - app-network

volumes:
  postgres_data:
  mongo_data:

networks:
  app-network:
    driver: bridge
